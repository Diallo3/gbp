// MIXINS
@mixin bp($media) {
	@if $media == small {
		@media only screen and (max-width: map-get($breakpoints,small) ) { @content; }
	}
	@else if $media == mediumDown {
		@media all and (max-width: map-get($breakpoints,medium)) { @content; }
	}
	@else if $media == medium {
		@media all and (min-width: (map-get($breakpoints,small)+1)) and (max-width: map-get($breakpoints,large)) { @content; }
	}
	@else if $media == mediumUp {
		@media all and (min-width: (map-get($breakpoints,small)+1)) { @content; }
	}
	@else if $media == largeDown {
		@media all and (max-width: map-get($breakpoints,large)) { @content; }
	}
	@else if $media == large {
		@media all and (min-width: (map-get($breakpoints,large)+1) ) { @content; }
	}
}

// UNIT CONVERSION
// from : http://davidwalsh.name/rem-px-browser-function-sass

$pixelBase : 16;

@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}



@function u($values){

	$list: ();

	@each $value in $values {
				
				$unit : unit($value);
				$val  : parseInt($value);

				@if ($px-only) and (($unit == 'px') or ($unit == 'rem')) {
					
					@if ($unit == 'px') {
						$list: append($list, $value);
					}

					@else {
						$list: append($list, ($val * $pixelBase) + px);
					}
				}

				@elseif ($unit == 'px') or ($unit == 'rem') {
					
					@if ($unit == 'px') {
						// conver the px value into a rem value
						// if the unit is pixels and we are not pixel only - convert the pixels to rems;
						// 160px = 16px * 10 -- thus divide the incoming px value by the $pixelBase to get the rem value

						$list: append($list, ($val/$pixelBase) + rem);
					}

					@else {
						$list: append($list, $value);
					}
				}

				@else {
							@warn 'There is no unit conversion for #{$unit}';
				}

	}

	@return $list();

}

@mixin zero_out {
	margin: 0;
	padding: 0;
}


// Clear List
@mixin clearfix {
	&:before,
	&:after {
	    content: " "; /* 1 */
	    display: table; /* 2 */
	}

	&:after {
	    clear: both;
	}
}

// Vertical Align
@mixin vertical_align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%) !important;
  -ms-transform: translateY(-50%) !important;
  transform: translateY(-50%) !important;
}

// Full Width
@mixin full_width {
	width: 100%;
	display: block;
	position: relative;
}

// Flat Lists
@mixin flat_list {
	@include zero_out();
	list-style-type: none;
	li {
		float: none;
		position: relative;
	}
}

// Inline Lists
@mixin inline_list($float: left, $margin: 0, $padding: 0, $li-float: left, $li-margin: 0, $li-padding: 0) {
	@include zero_out();
	list-style-type: none;
	margin: $margin;
	padding: $padding;
	float: $float;
	position: relative;
	li {
		margin: $li-margin;
		padding: $li-padding;
		float: $li-float;
		position: relative;
	}
}

@mixin centered_list {
	left: 50%;
	li {
		right: 50%;
	}
}

// Opacity
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}


// Center Block
@mixin center_block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Absolute Positioning
@mixin abs_pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
	margin: auto;
	position: absolute;
  	top: $top;
  	right: $right;
  	bottom: $bottom;
  	left: $left;
}

// Circle
@mixin circle($width, $color) {
  width: $width;
  height: $width;
  background: $color;
  -webkit-border-radius: $width/2;
     -moz-border-radius: $width/2;
          border-radius: $width/2;
}

// FUNCTIONS
@function black($opacity) {
 	@return rgba(black, $opacity)
}
@function white($opacity) {
 	@return rgba(white, $opacity)
}